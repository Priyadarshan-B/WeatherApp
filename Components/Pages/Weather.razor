@page "/weather"
@using BlazorMauiApp1.Models
@using BlazorMauiApp1.Services
@inject UserFavoriteCitiesService FavoriteCitiesService
@inject IEmailService EmailService
@inject IAuthService AuthService

<h2 class="text-center my-4">üå§Ô∏è Weather Forecast - India</h2>

<div class="container">

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") text-center">@statusMessage</div>
    }

    @if (userFavoriteCities.Any())
    {
        <div class="mb-4 text-center">
            <h5 class="mb-3">‚≠ê Your Favorites</h5>
            @foreach (var city in userFavoriteCities)
            {
                <button class="btn btn-outline-primary btn-sm me-2 mb-2" @onclick="() => SelectFavoriteCity(city)">
                    @city
                </button>
            }
        </div>
        <hr/>
    }

    <div class="form-check form-switch d-flex justify-content-end mb-3">
        <input class="form-check-input" type="checkbox" role="switch" id="unitToggle" @bind="isFahrenheit" />
        <label class="form-check-label ms-2" for="unitToggle">
            Show in @((isFahrenheit ? "Fahrenheit (¬∞F)" : "Celsius (¬∞C)"))
        </label>
    </div>

    <div class="row mb-4">
        <div class="col-md-6 mx-auto">
            <input class="form-control mb-2" type="text" placeholder="Search city for forecast..." @bind="searchTerm" @bind:event="oninput" />
            <select class="form-select" @onchange="OnCitySelected">
                <option disabled selected value="">-- Select a city for forecast --</option>
                @foreach (var city in FilteredCities)
                {
                    <option value="@city">@city</option>
                }
            </select>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    @if (!isLoading && forecast != null)
    {
        <div class="row">
            <div class="col-md-8 mx-auto">
                <div class="card shadow-sm mb-4 text-center">
                    <div class="card-body">
                        <div class="d-flex justify-content-center align-items-center mb-2">
                            <h4 class="mb-0 me-3">@forecast.Location.Name, @forecast.Location.Region</h4>
                            <button class="btn btn-sm btn-outline-success" @onclick="SendEmailReport" disabled="@(isSendingEmail || !isUserAuthenticated)" title="@(isUserAuthenticated ? "Email this forecast" : "Please log in to use this feature")">
                                <i class="bi bi-envelope"></i>
                                @(isSendingEmail ? "Sending..." : "Email Me")
                            </button>
                        </div>
                        <p>
                            <strong>Now:</strong>
                            @(isFahrenheit ? $"{forecast.Current.TempF} ¬∞F" : $"{forecast.Current.TempC} ¬∞C") -
                            @forecast.Current.Condition.Text
                        </p>
                    </div>
                </div>
                <div class="row row-cols-1 row-cols-md-3 g-4">
                    @foreach (var day in forecast.Forecast.Forecastday)
                    {
                        <div class="col">
                            <div class="card h-100 text-center">
                                <div class="card-body">
                                    <h5 class="card-title">@day.Date.ToString("MMM dd")</h5>
                                    <img src="https:@day.Day.Condition.Icon" alt="icon" />
                                    <p class="card-text">
                                        <strong>Max:</strong> @(isFahrenheit ? $"{day.Day.MaxTempF} ¬∞F" : $"{day.Day.MaxTempC} ¬∞C")<br />
                                        <strong>Min:</strong> @(isFahrenheit ? $"{day.Day.MinTempF} ¬∞F" : $"{day.Day.MinTempC} ¬∞C")
                                    </p>
                                    <p>@day.Day.Condition.Text</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <hr class="my-4"/>

    <div class="row mb-4">
        <div class="col-md-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Manage Favorite Cities</h5>
                    <p class="card-text">Select cities to add to your favorites list.</p>
                    <div class="mb-3">
                        <select multiple class="form-select" style="height: 100px;" @onchange="OnFavoriteCitySelected">
                            @foreach (var city in cities.OrderBy(c => c))
                            {
                                <option value="@city">@city</option>
                            }
                        </select>
                    </div>
                    @if (selectedFavorites.Any())
                    {
                        <p><strong>Selected to add:</strong> @string.Join(", ", selectedFavorites)</p>
                    }
                    <button class="btn btn-primary" @onclick="AddSelectedFavoritesAsync" disabled="@(!selectedFavorites.Any() || !isUserAuthenticated)" title="@(isUserAuthenticated ? "Add to your favorites" : "Please log in to use this feature")">
                        Add to Favorites
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private string? selectedCity;
    private string searchTerm = "";
    private bool isFahrenheit = false;
    private bool isLoading = false;
    private string statusMessage = "";
    private bool isError = false;
    private WeatherForecastApiResponse? forecast;
    private List<string> selectedFavorites = new();
    private List<string> userFavoriteCities = new();

    // New state properties
    private bool isSendingEmail = false;
    private bool isUserAuthenticated = false;

    private readonly List<string> cities = new()
    {
        "Delhi", "Mumbai", "Bengaluru", "Hyderabad", "Chennai", "Kolkata", "Pune", "Ahmedabad", "Jaipur", "Surat",
        "Lucknow", "Bhopal", "Visakhapatnam", "Chandigarh", "Coimbatore", "Nagpur", "Patna", "Indore", "Thiruvananthapuram", "Madurai"
    };

    private IEnumerable<string> FilteredCities => string.IsNullOrWhiteSpace(searchTerm)
        ? cities.OrderBy(c => c)
        : cities.Where(c => c.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).OrderBy(c => c);

    protected override async Task OnInitializedAsync()
    {
        isUserAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isUserAuthenticated)
        {
            await LoadUserFavoritesAsync();
        }
    }

    private async Task LoadUserFavoritesAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if(user != null)
        {
             userFavoriteCities = await FavoriteCitiesService.GetFavoriteCitiesAsync(user.Id);
        }
    }

    private async Task SelectFavoriteCity(string city)
    {
        selectedCity = city;
        await LoadForecastAsync();
    }

    private void OnFavoriteCitySelected(ChangeEventArgs e)
    {
        if (e.Value is string[] selectedValues)
        {
            selectedFavorites = selectedValues.ToList();
        }
    }

    private async Task AddSelectedFavoritesAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user == null || !selectedFavorites.Any()) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            await FavoriteCitiesService.AddFavoriteCitiesAsync(user.Id, selectedFavorites);
            statusMessage = "Favorite cities were successfully updated!";
            isError = false;
            selectedFavorites.Clear();
            await LoadUserFavoritesAsync();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error adding favorites: {ex.Message}";
            isError = true;
        }

        isLoading = false;
        StateHasChanged();
    }
    
    private async Task SendEmailReport()
    {
        if (forecast == null)
        {
            statusMessage = "Please select a city to get a forecast first.";
            isError = true;
            return;
        }

        isSendingEmail = true;
        StateHasChanged();

        try
        {
            var user = await AuthService.GetUserDetailsAsync();
            if (user == null || string.IsNullOrEmpty(user.Email))
            {
                statusMessage = "Could not find your email. Please ensure you are logged in.";
                isError = true;
                return;
            }

            await EmailService.SendWeatherReportAsync(user.Email, user.Name, forecast);
            @* await EmailService.SendWeatherReportAsync("priyadarshan.cs22@bitsathy.ac.in", user.Name, forecast); *@

            statusMessage = $"Weather report sent to {user.Email} successfully!";
            isError = false;
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to send email: {ex.Message}";
            isError = true;
        }
        finally
        {
            isSendingEmail = false;
            StateHasChanged();
        }
    }

    private async Task OnCitySelected(ChangeEventArgs e)
    {
        selectedCity = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selectedCity))
        {
            await LoadForecastAsync();
        }
    }

    private async Task LoadForecastAsync()
    {
        if(string.IsNullOrWhiteSpace(selectedCity)) return;

        isLoading = true;
        statusMessage = "";
        isError = false;
        forecast = null;

        var apiKey = "a239da81dc2a4cceb05154414251304";
        var url = $"https://api.weatherapi.com/v1/forecast.json?key={apiKey}&q={selectedCity}&days=7&aqi=no&alerts=no";

        try
        {
            using var client = new HttpClient();
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                forecast = await response.Content.ReadFromJsonAsync<WeatherForecastApiResponse>();
                if (forecast == null)
                {
                    statusMessage = "Unable to parse weather data.";
                    isError = true;
                }
            }
            else
            {
                statusMessage = $"Error fetching forecast: {response.ReasonPhrase}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Exception: {ex.Message}";
            isError = true;
        }

        isLoading = false;
        StateHasChanged();
    }
}