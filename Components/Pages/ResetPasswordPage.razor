@page "/reset-password"
@using BlazorMauiApp1.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IMauiNavigationService MauiNavigation

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold text-primary mb-2">Reset Password</h2>
                        <p class="text-muted">Enter your new password below</p>
                    </div>
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @(message.Contains("successful") ? "alert-success" : "alert-info") mt-3"
                            role="alert">
                            @message
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@model" OnValidSubmit="HandleResetPassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <InputText @bind-Value="model.NewPassword" class="form-control" type="password"
                                    placeholder="New Password" />
                            </div>
                            <div class="mb-3">
                                <InputText @bind-Value="model.ConfirmPassword" class="form-control" type="password"
                                    placeholder="Confirm New Password" />
                            </div>
                            <div class="d-grid mb-2">
                                <button class="btn btn-primary btn-lg" type="submit" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Resetting Password...</span>
                                    }
                                    else
                                    {
                                        <span>Reset Password</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                    <div class="d-flex justify-content-between mt-2">
                        <a href="#" @onclick="GoToLogin">Back to Login</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordModel model = new();
    private string? message;
    private string? accessToken;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        System.Diagnostics.Debug.WriteLine("ResetPasswordPage: OnInitialized called");

        // Try to get the token from the static service
        accessToken = BlazorMauiApp1.Services.DeepLinkService.PendingResetToken;
        System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Token from DeepLinkService: {accessToken}");

        // Fallback: try to get from query string or fragment (for web)
        if (string.IsNullOrEmpty(accessToken))
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Current URI: {uri}");

            // Try query string first
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            accessToken = query.Get("access_token");
            System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Token from query string: {accessToken}");

            // If not found, try fragment
            if (string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(uri.Fragment))
            {
                System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Checking fragment: {uri.Fragment}");
                var fragment = uri.Fragment.TrimStart('#');
                var fragmentQuery = System.Web.HttpUtility.ParseQueryString(fragment);
                accessToken = fragmentQuery.Get("access_token");
                System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Token from fragment: {accessToken}");
            }
        }

        // Only set message if token is not found
        if (string.IsNullOrEmpty(accessToken))
        {
            message = "Token not found. Please try again.";
            System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Token not found, setting error message");
        }
        else
        {
            System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Token found, form will be shown");
        }

        // If no token found, try to check again after a short delay
        if (string.IsNullOrEmpty(accessToken))
        {
            System.Diagnostics.Debug.WriteLine("ResetPasswordPage: No token found, will check again in 1 second");
            _ = Task.Delay(1000).ContinueWith(_ => CheckTokenAgain());
        }
    }

    private void CheckTokenAgain()
    {
        System.Diagnostics.Debug.WriteLine("ResetPasswordPage: CheckTokenAgain called");
        var newToken = BlazorMauiApp1.Services.DeepLinkService.PendingResetToken;
        System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: New token check: {newToken}");

        if (!string.IsNullOrEmpty(newToken))
        {
            accessToken = newToken;
            message = null; // Clear the message to show the form
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleResetPassword()
    {
        if (string.IsNullOrEmpty(accessToken))
        {
            message = "Invalid or missing access token.";
            return;
        }

        // Validate passwords match
        if (model.NewPassword != model.ConfirmPassword)
        {
            message = "Passwords do not match.";
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.ResetPasswordAsync(accessToken, model.NewPassword);
            if (result)
            {
                message = "Password reset successful! Redirecting to login page...";
                StateHasChanged();

                // Wait a moment to show the success message, then navigate
                await Task.Delay(2000);
                GoToLogin();
            }
            else
            {
                message = "Failed to reset password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"ResetPasswordPage: Error in HandleResetPassword: {ex.Message}");
            message = "An error occurred while resetting your password. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void GoToLogin()
    {
        System.Diagnostics.Debug.WriteLine("ResetPasswordPage: Navigating to login page");
        // Clear the token after successful reset
        BlazorMauiApp1.Services.DeepLinkService.PendingResetToken = null;

        // Navigate to login page using MauiNavigationService
        MauiNavigation.NavigateToBlazorMauiPage<BlazorMauiApp1.Components.Pages.LoginPage>();
    }


    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}